#!/usr/bin/env python3

import argparse
import hashlib
import urllib.request
from pathlib import Path

CHUNK_SIZE_BYTES = 4096


def md5(file_path: Path) -> bytes:
    h = hashlib.md5()
    with file_path.open("rb") as f:
        for chunk in iter(lambda: f.read(CHUNK_SIZE_BYTES), b""):
            h.update(chunk)
    return h.digest()


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", required=True, help="URL to download from")
    parser.add_argument(
        "-o", "--output", type=Path, required=True, help="output file path"
    )
    parser.add_argument("--md5", help="optional MD5 hash for checking")
    args = parser.parse_args()

    def report_hook(
        chunk_number: int, maximum_chunk_size: int, total_size: int
    ) -> None:
        downloaded_size = min(chunk_number * maximum_chunk_size, total_size)
        downloaded_fraction = downloaded_size / total_size
        print(
            f"\r{downloaded_size} / {total_size} | {100 * downloaded_fraction:.2f} %",
            end="",
        )

    print("downloading file:", args.url)
    urllib.request.urlretrieve(args.url, args.output, report_hook)

    real_md5 = md5(args.output)
    if args.md5 and args.md5 != real_md5:
        raise RuntimeError(
            "MD5 mismatch:\n" + "  expected: {args.md5}\n" + "  got:      {real_md5}\n"
        )

    print("MD5:", real_md5)


if __name__ == "__main__":
    main()
